name: Terraform AWS Observability Synthetics Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-observability-synthetics

description: |-
  AWS Observability Synthetics Module for comprehensive monitoring and testing infrastructure. This module provides advanced management of AWS Synthetics canaries with features including URL endpoint monitoring, API testing, custom script execution, and VPC-based deployments. Supports CloudWatch integration for metrics and alarms with SNS notifications, organized canary grouping, and flexible configuration options for various monitoring scenarios.

# Introduction to the project
introduction: |-
  This Terraform module provides comprehensive management of AWS Synthetics canaries for monitoring endpoints, APIs, and web applications. It supports:
  - Organized canary groups for better resource management and logical separation
  - VPC-based canary execution with custom subnet and security group configuration
  - Flexible monitoring schedules with cron and rate expressions
  - Configurable retention periods for test results and artifacts
  - Environment variable management for custom script parameters
  - CloudWatch alarms integration with customizable thresholds and conditions
  - SNS notifications for monitoring results with multiple topic support
  - Custom artifact storage in S3 with optional bucket creation
  - Priority-based alarm configuration (P1-P5)
  - Multiple assertion types for response validation
  - Support for both API and URL monitoring scenarios

# How to use this project
usage: |-
  Configure canaries using YAML format in your Terraform/Terragrunt configuration:

  # Terraform Configuration
  groups:
    - name: "monitoring-group"
      tags:
        Environment: "Production"
        Cost-Center: "Operations"
      canaries:
        - name: "endpoint-monitor"
          runtime_version: "syn-python-selenium-6.0"
          schedule_expression: "rate(5 minutes)"
          requests_type: "URL"
          description: "API Health Check Monitor"
          requests:
            - url: "https://api.example.com/health"
              method: "GET"
              headers:
                Content-Type: "application/json"
                Authorization: "Bearer ${env:API_TOKEN}"
              assertions:
                - type: "STATUS_CODE"
                  operator: "EQUALS"
                  value: 200
                - type: "RESPONSE_TIME"
                  operator: "LESS_THAN"
                  value: 2000
          run_config:
            timeout_in_seconds: 60
            memory_mb: 1024
          alarms:
            enabled: true
            priority: 2
            metric: "SuccessPercent"
            threshold: 90
            period: 300
            evaluation_periods: 2
            notifications:
              - sns_topic_name: "urgent-alerts"
          tags:
            Service: "API-Gateway"

  # Terragrunt Configuration
  # terragrunt.hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "cloudopsworks/terraform-module-aws-observability-synthetics//."
  }

  inputs = {
    create_artifacts_bucket = true
    artifacts_bucket       = "my-synthetics-artifacts"
    default_sns_topic_name = "monitoring-alerts"

    vpc = {
      vpc_id     = dependency.vpc.outputs.vpc_id
      subnet_ids = dependency.vpc.outputs.private_subnets
    }

    groups = [
      {
        name = "api-monitoring"
        canaries = [
          {
            name = "api-health"
            # ... canary configuration ...
          }
        ]
      }
    ]
  }

# Example usage
examples: |-
  ```hcl
  module "synthetics" {
    source = "cloudopsworks/terraform-module-aws-observability-synthetics"

    groups = [
      {
        name = "api-monitoring"
        canaries = [
          {
            name = "api-health"
            requests_type = "API"
            requests = [
              {
                url = "https://api.example.com/v1/status"
                method = "GET"
                assertions = [
                  {
                    type = "STATUS_CODE"
                    operator = "EQUALS"
                    value = 200
                  }
                ]
              }
            ]
          }
        ]
      }
    ]

    vpc = {
      vpc_id = "vpc-1234567"
      subnet_ids = ["subnet-abcdef"]
    }

    artifacts_bucket = "my-artifacts-bucket"
    sns_topic_name = "monitoring-alerts"
  }
  ```

# How to get started quickly
quickstart: |-
  1. Prepare your AWS environment:
     - Create VPC and subnets for canary execution
     - Set up IAM permissions for Synthetics execution
     - Create S3 bucket for artifacts (optional, can be created by module)
     - Create SNS topics for notifications

  2. Create Terraform/Terragrunt configuration:
     ```hcl
     module "synthetics" {
       source = "cloudopsworks/terraform-module-aws-observability-synthetics"
       version = "1.0.0"

       create_artifacts_bucket = true
       artifacts_bucket = "my-synthetics-artifacts"

       vpc = {
         vpc_id = "vpc-12345"
         subnet_ids = ["subnet-abc123"]
       }
     }
     ```

  3. Define monitoring groups and canaries in YAML:
     ```yaml
     groups:
       - name: "api-monitoring"
         canaries:
           - name: "health-check"
             runtime_version: "syn-python-selenium-6.0"
             schedule_expression: "rate(5 minutes)"
     ```

  4. Apply configuration:
     ```bash
     terraform init
     terraform plan
     terraform apply
     ```

  5. Monitor results:
     - Check AWS Synthetics dashboard
     - View CloudWatch metrics
     - Configure additional alarms as needed

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"